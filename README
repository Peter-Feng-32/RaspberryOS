Current step:

Write a GPIO driver to be able to read/write GPIO pins. - Done
Going to use this to talk with the computer using the UART device. - Done

Now we implement XMODEM for file transfer - Done

Then we write a utility to talk to our raspberry pi (ttywrite) - Not needed w/ emulator.  Skip for now. 

After that, we can implement a shell with hard coded 'echo'.  Store arguments as a stack vector.  Make a console. - Done

Write timer and interrupt controller - In progress

Next write file transfer functionality with bootloader.

Todo: 
Add commands to generate linker map file and dependency files.
Typedef so we dont use int, long, long long anymore instead we use u16, u32, u64

UART issue:
https://forums.raspberrypi.com/viewtopic.php?t=368715

qemu-system-aarch64 -M raspi3b -kernel build/bootloader/kernel8.img -nographic -serial null -chardev pipe,id=uart1,path=uart1 -serial chardev:uart1 -s -S